public class AudioFile {
	
	private String pathname = "";
	private String filename = "";
	private String author = "";
	private String title = "";
	
	public static void main(String[] args) {
		AudioFile f = new AudioFile();
		String name = "Falco - Rock Me Amadeus.mp3";
		System.out.printf("Before: %s \n", name);
		f.parseFilename(name);
		System.out.printf("After: %s,%s\n", f.getAuthor(), f.getTitle());
	}
	
	// constructor
	AudioFile(){
//		Utils.emulateLinux();
	}
	
	AudioFile(String pathname){
		this.pathname = pathname;
	}
	
	void parsePathname(String path) {
		
		// edge case checks
		if(path.stripTrailing() == "") return;
		
		// check OS and parse appropriately
		
		// left and right stripping
		String oldPath = path.stripTrailing();
//		System.out.println(oldPath.stripLeading().toCharArray()[0]);
		if(oldPath.stripLeading().toCharArray()[0] != '\\' || oldPath.stripLeading().toCharArray()[0] != '/') oldPath = oldPath.stripLeading();
		
		String fileName = "";
		
		if(isWindows()) {
			
			// Windows path parsing
			System.out.println("OS: Windows");
			
			// replace wrong and repeating slashes by platform
			while(oldPath.contains("/")) oldPath = oldPath.replace("/", "\\");
			while(oldPath.contains("\\\\")) oldPath = oldPath.replace("\\\\", "\\");
			
			// extract filename
			String pathElements[] = oldPath.split("\\\\");
			if(oldPath.toCharArray()[oldPath.toCharArray().length - 1] != '\\') fileName = pathElements[pathElements.length - 1];
						
			// store file path and name
			this.pathname = oldPath;
			this.filename = fileName;
			
		}
		else {

			// Linux path parsing
			System.out.println("OS: Linux");
			
			// replace wrong and repeating slashes by platform
			while(oldPath.contains("\\")) oldPath = oldPath.replace("\\", "/");
			while(oldPath.contains("//")) oldPath = oldPath.replace("//", "/");
			
			// extract filename
			boolean endsWithSlash = false;
			String pathElements[] = oldPath.split("/");
			if(oldPath.toCharArray()[oldPath.toCharArray().length - 1] != '/') fileName = pathElements[pathElements.length - 1];
			else endsWithSlash = true;

			// handle file path format for drive when specified in global path
			for(int i = 0; i < pathElements.length; i++) {
				if(pathElements[i].contains(":")) {
					pathElements[i] = "/" + pathElements[i].split(":")[0];
				}
			}

			oldPath = String.join("/", pathElements);		
			if(endsWithSlash == true) oldPath += "/";
						
			this.pathname = oldPath;
			this.filename = fileName;
		}
//		System.out.printf("After: %s,%s\n", this.pathname, this.filename);
	}
	
	void parseFilename(String filename) {
		if(filename.strip() == "") return;

		String name = filename.strip().substring(0, filename.lastIndexOf(".") + 1);
		System.out.println(name);

		String author = "", title = "";
		if(name.contains("-")) {
			String dat[] = name.split("-");
			author = dat[0].strip();
			title = dat[1].strip();
		}
		else {
			title = name.strip();
		}
		
		this.author = author;
		this.title = title;
		
	}
	
	String getPathname() {
		return pathname;
	}
	
	String getFilename() {
		return filename;
	}
	
	String getAuthor() {
		return author;
	}
	
	String getTitle() {
		return title;
	}
	
	private boolean isWindows() {
		 return System.getProperty("os.name").toLowerCase()
		 .indexOf("win") >= 0;
	}
}
